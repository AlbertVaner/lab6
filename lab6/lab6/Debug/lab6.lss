
lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000039a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000326  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000039a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a33  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000735  00000000  00000000  00000ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004cf  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00001aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042d  00000000  00000000  00001b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000016d  00000000  00000000  00001fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002136  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 33 01 	call	0x266	; 0x266 <main>
  88:	0c 94 91 01 	jmp	0x322	; 0x322 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <UART_confi>:
  90:	ef 92       	push	r14
  92:	ff 92       	push	r15
  94:	0f 93       	push	r16
  96:	9a b1       	in	r25, 0x0a	; 10
  98:	9e 7f       	andi	r25, 0xFE	; 254
  9a:	9a b9       	out	0x0a, r25	; 10
  9c:	9a b1       	in	r25, 0x0a	; 10
  9e:	92 60       	ori	r25, 0x02	; 2
  a0:	9a b9       	out	0x0a, r25	; 10
  a2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	29 f4       	brne	.+10     	; 0xb4 <UART_confi+0x24>
  aa:	e0 ec       	ldi	r30, 0xC0	; 192
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	80 83       	st	Z, r24
  b4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  b8:	61 30       	cpi	r22, 0x01	; 1
  ba:	29 f4       	brne	.+10     	; 0xc6 <UART_confi+0x36>
  bc:	e1 ec       	ldi	r30, 0xC1	; 193
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	80 83       	st	Z, r24
  c6:	41 30       	cpi	r20, 0x01	; 1
  c8:	29 f4       	brne	.+10     	; 0xd4 <UART_confi+0x44>
  ca:	e1 ec       	ldi	r30, 0xC1	; 193
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24
  d4:	e1 ec       	ldi	r30, 0xC1	; 193
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	88 61       	ori	r24, 0x18	; 24
  dc:	80 83       	st	Z, r24
  de:	21 30       	cpi	r18, 0x01	; 1
  e0:	29 f4       	brne	.+10     	; 0xec <UART_confi+0x5c>
  e2:	e2 ec       	ldi	r30, 0xC2	; 194
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	80 83       	st	Z, r24
  ec:	02 30       	cpi	r16, 0x02	; 2
  ee:	39 f1       	breq	.+78     	; 0x13e <UART_confi+0xae>
  f0:	28 f4       	brcc	.+10     	; 0xfc <UART_confi+0x6c>
  f2:	00 23       	and	r16, r16
  f4:	41 f0       	breq	.+16     	; 0x106 <UART_confi+0x76>
  f6:	01 30       	cpi	r16, 0x01	; 1
  f8:	a1 f0       	breq	.+40     	; 0x122 <UART_confi+0x92>
  fa:	4b c0       	rjmp	.+150    	; 0x192 <UART_confi+0x102>
  fc:	03 30       	cpi	r16, 0x03	; 3
  fe:	69 f1       	breq	.+90     	; 0x15a <UART_confi+0xca>
 100:	04 30       	cpi	r16, 0x04	; 4
 102:	c9 f1       	breq	.+114    	; 0x176 <UART_confi+0xe6>
 104:	46 c0       	rjmp	.+140    	; 0x192 <UART_confi+0x102>
 106:	e2 ec       	ldi	r30, 0xC2	; 194
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8d 7f       	andi	r24, 0xFD	; 253
 10e:	80 83       	st	Z, r24
 110:	80 81       	ld	r24, Z
 112:	8b 7f       	andi	r24, 0xFB	; 251
 114:	80 83       	st	Z, r24
 116:	e1 ec       	ldi	r30, 0xC1	; 193
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	8b 7f       	andi	r24, 0xFB	; 251
 11e:	80 83       	st	Z, r24
 120:	45 c0       	rjmp	.+138    	; 0x1ac <UART_confi+0x11c>
 122:	e2 ec       	ldi	r30, 0xC2	; 194
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	80 83       	st	Z, r24
 12c:	80 81       	ld	r24, Z
 12e:	8b 7f       	andi	r24, 0xFB	; 251
 130:	80 83       	st	Z, r24
 132:	e1 ec       	ldi	r30, 0xC1	; 193
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	8b 7f       	andi	r24, 0xFB	; 251
 13a:	80 83       	st	Z, r24
 13c:	37 c0       	rjmp	.+110    	; 0x1ac <UART_confi+0x11c>
 13e:	e2 ec       	ldi	r30, 0xC2	; 194
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	8d 7f       	andi	r24, 0xFD	; 253
 146:	80 83       	st	Z, r24
 148:	80 81       	ld	r24, Z
 14a:	84 60       	ori	r24, 0x04	; 4
 14c:	80 83       	st	Z, r24
 14e:	e1 ec       	ldi	r30, 0xC1	; 193
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	8b 7f       	andi	r24, 0xFB	; 251
 156:	80 83       	st	Z, r24
 158:	29 c0       	rjmp	.+82     	; 0x1ac <UART_confi+0x11c>
 15a:	e2 ec       	ldi	r30, 0xC2	; 194
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	82 60       	ori	r24, 0x02	; 2
 162:	80 83       	st	Z, r24
 164:	80 81       	ld	r24, Z
 166:	84 60       	ori	r24, 0x04	; 4
 168:	80 83       	st	Z, r24
 16a:	e1 ec       	ldi	r30, 0xC1	; 193
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	8b 7f       	andi	r24, 0xFB	; 251
 172:	80 83       	st	Z, r24
 174:	1b c0       	rjmp	.+54     	; 0x1ac <UART_confi+0x11c>
 176:	e2 ec       	ldi	r30, 0xC2	; 194
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	82 60       	ori	r24, 0x02	; 2
 17e:	80 83       	st	Z, r24
 180:	80 81       	ld	r24, Z
 182:	84 60       	ori	r24, 0x04	; 4
 184:	80 83       	st	Z, r24
 186:	e1 ec       	ldi	r30, 0xC1	; 193
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	84 60       	ori	r24, 0x04	; 4
 18e:	80 83       	st	Z, r24
 190:	0d c0       	rjmp	.+26     	; 0x1ac <UART_confi+0x11c>
 192:	e2 ec       	ldi	r30, 0xC2	; 194
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	8d 7f       	andi	r24, 0xFD	; 253
 19a:	80 83       	st	Z, r24
 19c:	80 81       	ld	r24, Z
 19e:	8b 7f       	andi	r24, 0xFB	; 251
 1a0:	80 83       	st	Z, r24
 1a2:	e1 ec       	ldi	r30, 0xC1	; 193
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	8b 7f       	andi	r24, 0xFB	; 251
 1aa:	80 83       	st	Z, r24
 1ac:	f0 92 c5 00 	sts	0x00C5, r15	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1b0:	e0 92 c4 00 	sts	0x00C4, r14	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1b4:	0f 91       	pop	r16
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	08 95       	ret

000001bc <escribri_terminal>:
	 UDR0= CaracterRx;
	mensaje();
	prender_leds();
}
void escribri_terminal(char caracter){
	while(!((UCSR0A &(1<<UDRE0))));
 1bc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1c0:	95 ff       	sbrs	r25, 5
 1c2:	fc cf       	rjmp	.-8      	; 0x1bc <escribri_terminal>
	UDR0= caracter;
 1c4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1c8:	08 95       	ret

000001ca <mensaje>:
}
void mensaje(){
	escribri_terminal('\n');
 1ca:	8a e0       	ldi	r24, 0x0A	; 10
 1cc:	0e 94 de 00 	call	0x1bc	; 0x1bc <escribri_terminal>
	escribri_terminal('I');
 1d0:	89 e4       	ldi	r24, 0x49	; 73
 1d2:	0e 94 de 00 	call	0x1bc	; 0x1bc <escribri_terminal>
	escribri_terminal('N');
 1d6:	8e e4       	ldi	r24, 0x4E	; 78
 1d8:	0e 94 de 00 	call	0x1bc	; 0x1bc <escribri_terminal>
	escribri_terminal('G');
 1dc:	87 e4       	ldi	r24, 0x47	; 71
 1de:	0e 94 de 00 	call	0x1bc	; 0x1bc <escribri_terminal>
	escribri_terminal('R');
 1e2:	82 e5       	ldi	r24, 0x52	; 82
 1e4:	0e 94 de 00 	call	0x1bc	; 0x1bc <escribri_terminal>
	escribri_terminal('E');
 1e8:	85 e4       	ldi	r24, 0x45	; 69
 1ea:	0e 94 de 00 	call	0x1bc	; 0x1bc <escribri_terminal>
	escribri_terminal('S');
 1ee:	83 e5       	ldi	r24, 0x53	; 83
 1f0:	0e 94 de 00 	call	0x1bc	; 0x1bc <escribri_terminal>
	escribri_terminal('E');
 1f4:	85 e4       	ldi	r24, 0x45	; 69
 1f6:	0e 94 de 00 	call	0x1bc	; 0x1bc <escribri_terminal>
	escribri_terminal(' ');
 1fa:	80 e2       	ldi	r24, 0x20	; 32
 1fc:	0e 94 de 00 	call	0x1bc	; 0x1bc <escribri_terminal>
	escribri_terminal('U');
 200:	85 e5       	ldi	r24, 0x55	; 85
 202:	0e 94 de 00 	call	0x1bc	; 0x1bc <escribri_terminal>
	escribri_terminal('N');
 206:	8e e4       	ldi	r24, 0x4E	; 78
 208:	0e 94 de 00 	call	0x1bc	; 0x1bc <escribri_terminal>
	escribri_terminal(' ');
 20c:	80 e2       	ldi	r24, 0x20	; 32
 20e:	0e 94 de 00 	call	0x1bc	; 0x1bc <escribri_terminal>
	escribri_terminal('C');
 212:	83 e4       	ldi	r24, 0x43	; 67
 214:	0e 94 de 00 	call	0x1bc	; 0x1bc <escribri_terminal>
	escribri_terminal('A');
 218:	81 e4       	ldi	r24, 0x41	; 65
 21a:	0e 94 de 00 	call	0x1bc	; 0x1bc <escribri_terminal>
	escribri_terminal('R');
 21e:	82 e5       	ldi	r24, 0x52	; 82
 220:	0e 94 de 00 	call	0x1bc	; 0x1bc <escribri_terminal>
	escribri_terminal('A');
 224:	81 e4       	ldi	r24, 0x41	; 65
 226:	0e 94 de 00 	call	0x1bc	; 0x1bc <escribri_terminal>
	escribri_terminal('C');
 22a:	83 e4       	ldi	r24, 0x43	; 67
 22c:	0e 94 de 00 	call	0x1bc	; 0x1bc <escribri_terminal>
	escribri_terminal('T');
 230:	84 e5       	ldi	r24, 0x54	; 84
 232:	0e 94 de 00 	call	0x1bc	; 0x1bc <escribri_terminal>
	escribri_terminal('E');
 236:	85 e4       	ldi	r24, 0x45	; 69
 238:	0e 94 de 00 	call	0x1bc	; 0x1bc <escribri_terminal>
	escribri_terminal('R');
 23c:	82 e5       	ldi	r24, 0x52	; 82
 23e:	0e 94 de 00 	call	0x1bc	; 0x1bc <escribri_terminal>
	escribri_terminal('\n');
 242:	8a e0       	ldi	r24, 0x0A	; 10
 244:	0e 94 de 00 	call	0x1bc	; 0x1bc <escribri_terminal>
	escribri_terminal(10);
 248:	8a e0       	ldi	r24, 0x0A	; 10
 24a:	0e 94 de 00 	call	0x1bc	; 0x1bc <escribri_terminal>
	escribri_terminal(13);
 24e:	8d e0       	ldi	r24, 0x0D	; 13
 250:	0e 94 de 00 	call	0x1bc	; 0x1bc <escribri_terminal>
 254:	08 95       	ret

00000256 <setup>:
}
void setup(void){
	DDRB =0xFF;
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	84 b9       	out	0x04, r24	; 4
	PORTB= 0;
 25a:	15 b8       	out	0x05, r1	; 5
	DDRC =0x03;
 25c:	83 e0       	ldi	r24, 0x03	; 3
 25e:	87 b9       	out	0x07, r24	; 7
	PORTC= 0xF0;
 260:	80 ef       	ldi	r24, 0xF0	; 240
 262:	88 b9       	out	0x08, r24	; 8
 264:	08 95       	ret

00000266 <main>:
volatile CaracterRx;


int main(void)
{
	setup();
 266:	0e 94 2b 01 	call	0x256	; 0x256 <setup>
	UART_confi(_fast,_On,_Off,_Off,_b_8,207);
 26a:	0f 2e       	mov	r0, r31
 26c:	ff ec       	ldi	r31, 0xCF	; 207
 26e:	ef 2e       	mov	r14, r31
 270:	f1 2c       	mov	r15, r1
 272:	f0 2d       	mov	r31, r0
 274:	03 e0       	ldi	r16, 0x03	; 3
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	61 e0       	ldi	r22, 0x01	; 1
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 48 00 	call	0x90	; 0x90 <UART_confi>
	sei();
 282:	78 94       	sei
	mensaje();
 284:	0e 94 e5 00 	call	0x1ca	; 0x1ca <mensaje>
 288:	ff cf       	rjmp	.-2      	; 0x288 <main+0x22>

0000028a <prender_leds>:
	PORTB= 0;
	DDRC =0x03;
	PORTC= 0xF0;
}
void prender_leds(void){
	PORTB=CaracterRx;
 28a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 28e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 292:	85 b9       	out	0x05, r24	; 5
	PORTC=((CaracterRx>>6)&0b11)|(0xF0);
 294:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 298:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 29c:	08 2e       	mov	r0, r24
 29e:	89 2f       	mov	r24, r25
 2a0:	00 0c       	add	r0, r0
 2a2:	88 1f       	adc	r24, r24
 2a4:	99 0b       	sbc	r25, r25
 2a6:	00 0c       	add	r0, r0
 2a8:	88 1f       	adc	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	83 70       	andi	r24, 0x03	; 3
 2ae:	80 6f       	ori	r24, 0xF0	; 240
 2b0:	88 b9       	out	0x08, r24	; 8
 2b2:	08 95       	ret

000002b4 <__vector_18>:
    }
	
}


ISR(USART_RX_vect){
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	2f 93       	push	r18
 2c0:	3f 93       	push	r19
 2c2:	4f 93       	push	r20
 2c4:	5f 93       	push	r21
 2c6:	6f 93       	push	r22
 2c8:	7f 93       	push	r23
 2ca:	8f 93       	push	r24
 2cc:	9f 93       	push	r25
 2ce:	af 93       	push	r26
 2d0:	bf 93       	push	r27
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
	CaracterRx= UDR0;
 2d6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	while(!((UCSR0A &(1<<UDRE0))));
 2e4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2e8:	85 ff       	sbrs	r24, 5
 2ea:	fc cf       	rjmp	.-8      	; 0x2e4 <__vector_18+0x30>
	 UDR0= CaracterRx;
 2ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	mensaje();
 2f8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <mensaje>
	prender_leds();
 2fc:	0e 94 45 01 	call	0x28a	; 0x28a <prender_leds>
}
 300:	ff 91       	pop	r31
 302:	ef 91       	pop	r30
 304:	bf 91       	pop	r27
 306:	af 91       	pop	r26
 308:	9f 91       	pop	r25
 30a:	8f 91       	pop	r24
 30c:	7f 91       	pop	r23
 30e:	6f 91       	pop	r22
 310:	5f 91       	pop	r21
 312:	4f 91       	pop	r20
 314:	3f 91       	pop	r19
 316:	2f 91       	pop	r18
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

00000322 <_exit>:
 322:	f8 94       	cli

00000324 <__stop_program>:
 324:	ff cf       	rjmp	.-2      	; 0x324 <__stop_program>
